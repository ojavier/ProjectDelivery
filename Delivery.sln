#include <iostream>
#include <vector>
using namespace std;

class Persona {
protected:
    std::string nombre;
    int edad;
    int id;

public:
    Persona(const std::string& nombre, int edad, int id)
        : nombre(nombre), edad(edad), id(id) {}

    virtual void mostrarInformacion() {
        std::cout << "Nombre: " << nombre << std::endl;
        std::cout << "Edad: " << edad << std::endl;
        std::cout << "ID: " << id << std::endl;
    }

    std::string getNombre() const {
        return nombre;
    }

    void setNombre(const std::string& nuevoNombre) {
        nombre = nuevoNombre;
    }

    int getEdad() const {
        return edad;
    }

    void setEdad(int nuevaEdad) {
        edad = nuevaEdad;
    }

    int getID() const {
        return id;
    }

    void setID(int nuevoID) {
        id = nuevoID;
    }
};


class Usuario : public Persona {
private:
    std::string correoElectronico;
    std::string contraseña;
    std::vector<Boleto*> boletos;
    std::vector<Pago*> pagos;

public:
    // Constructor
    Usuario(int id, const std::string& nombreUsuario, const std::string& correo, const std::string& contraseñaUsuario)
        : Persona(nombreUsuario, 0, id), correoElectronico(correo), contraseña(contraseñaUsuario) {}

    // Métodos
    void iniciarSesion() {
        std::cout << "Iniciando sesión como " << nombre << std::endl;
        // Lógica de inicio de sesión
    }

    void realizarReserva(Boleto* boleto) {
        std::cout << "Realizando reserva del boleto ID: " << boleto->getIdBoleto() << " para el usuario " << nombre << std::endl;
        // Lógica para realizar la reserva
    }

    void cancelarReserva(Boleto* boleto) {
        std::cout << "Cancelando reserva del boleto ID: " << boleto->getIdBoleto() << " para el usuario " << nombre << std::endl;
        // Lógica para cancelar la reserva
    }

    void agregarBoleto(Boleto* boleto) {
        std::cout << "Agregando boleto ID: " << boleto->getIdBoleto() << " al usuario " << nombre << std::endl;
        boletos.push_back(boleto);
    }

    void agregarPago(Pago* pago) {
        std::cout << "Agregando pago al usuario " << nombre << std::endl;
        pagos.push_back(pago);
    }

    // Override del método mostrarInformacion() de la clase base
    void mostrarInformacion() override {
        Persona::mostrarInformacion();
        std::cout << "Correo electrónico: " << correoElectronico << std::endl;
        std::cout << "Contraseña: " << contraseña << std::endl;
    }

    // Getters y setters adicionales
    std::string getCorreoElectronico() const {
        return correoElectronico;
    }

    void setCorreoElectronico(const std::string& nuevoCorreo) {
        correoElectronico = nuevoCorreo;
    }

    std::string getContraseña() const {
        return contraseña;
    }

    void setContraseña(const std::string& nuevaContraseña) {
        contraseña = nuevaContraseña;
    }
};

class Conductor : public Persona {
private:
    int idConductor;

public:
    Conductor(const std::string& nombre, int edad, int id, int idConductor)
        : Persona(nombre, edad, id), idConductor(idConductor) {}

    void mostrarInformacion() override {
        std::cout << "--- Información del Conductor ---" << std::endl;
        Persona::mostrarInformacion();
        std::cout << "ID Conductor: " << idConductor << std::endl;
    }

    int getIDConductor() const {
        return idConductor;
    }

    void setIDConductor(int nuevoIDConductor) {
        idConductor = nuevoIDConductor;
    }
};


class Boleto {
private:
    int idBoleto;
    string origen;
    string destino;
    Fecha fecha;
    Hora hora;
    Usuario* usuario;
    vector<Pago*> pagos;
    float costo;      // Atributo para el costo del boleto
    int asiento;      // Atributo para el número de asiento asignado

public:
    // Constructor
    Boleto(int id, const string& origenBoleto, const string& destinoBoleto, const Fecha& fechaViaje, const Hora& horaViaje, float costoBoleto)
        : idBoleto(id), origen(origenBoleto), destino(destinoBoleto), fecha(fechaViaje), hora(horaViaje), usuario(nullptr), costo(costoBoleto), asiento(0) {}

    // Getters
    int getIdBoleto() const {
        return idBoleto;
    }

    string getOrigen() const {
        return origen;
    }

    string getDestino() const {
        return destino;
    }

    Fecha getFecha() const {
        return fecha;
    }

    Hora getHora() const {
        return hora;
    }

    Usuario* getUsuario() const {
        return usuario;
    }

    float getCosto() const {
        return costo;
    }

    int getAsiento() const {
        return asiento;
    }

    // Setter
    void setUsuario(Usuario* usuario) {
        this->usuario = usuario;
    }

    // Otros métodos
    void realizarPago() {
        cout << "Realizando pago del boleto ID: " << idBoleto << endl;
        // Lógica de pago
    }

    void cancelarReserva() {
        cout << "Cancelando reserva del boleto ID: " << idBoleto << endl;
        // Lógica de cancelación de reserva
    }

    void agregarPago(Pago* pago) {
        cout << "Agregando pago al boleto ID: " << idBoleto << endl;
        pagos.push_back(pago);
    }

    // Setters
    void setIdBoleto(int id) {
        idBoleto = id;
    }

    void setOrigen(const string& nuevoOrigen) {
        origen = nuevoOrigen;
    }

    void setDestino(const string& nuevoDestino) {
        destino = nuevoDestino;
    }

    void setFecha(const Fecha& nuevaFecha) {
        fecha = nuevaFecha;
    }

    void setHora(const Hora& nuevaHora) {
        hora = nuevaHora;
    }

    void setCosto(float nuevoCosto) {
        costo = nuevoCosto;
    }

    void setAsiento(int nuevoAsiento) {
        asiento = nuevoAsiento;
    }
};


class Autobus : public Conductor {
private:
    int idAutobus;
    string modelo;
    int capacidadMaxima;
    Ruta* ruta;  // Relación de agregación con la clase Ruta
    vector<Boleto*> boletos;  // Relación de agregación con la clase Boleto

public:
    // Constructor
    Autobus(int id, const string& modeloAutobus, int capacidad, const string& conductorAutobus, int idConductor)
        : Conductor(conductorAutobus, 0, id, idConductor), idAutobus(id), modelo(modeloAutobus), capacidadMaxima(capacidad), ruta(nullptr) {}

    // Getters
    int getIdAutobus() const {
        return idAutobus;
    }

    string getModelo() const {
        return modelo;
    }

    int getCapacidadMaxima() const {
        return capacidadMaxima;
    }

    Ruta* getRuta() const {
        return ruta;
    }

    const vector<Boleto*>& getBoletos() const {
        return boletos;
    }

    // Otros métodos
    bool verificarDisponibilidad() {
        // Lógica para verificar la disponibilidad del autobús
    }

    void reservarAsiento() {
        // Lógica para reservar un asiento en el autobús
    }

    // Método para agregar un boleto al autobús
    void agregarBoleto(Boleto* boleto) {
        boletos.push_back(boleto);
    }

    // Setters
    void setIdAutobus(int id) {
        idAutobus = id;
    }

    void setModelo(const string& nuevoModelo) {
        modelo = nuevoModelo;
    }

    void setCapacidadMaxima(int capacidad) {
        capacidadMaxima = capacidad;
    }

    void setRuta(Ruta* nuevaRuta) {
        ruta = nuevaRuta;
    }
};



class Ruta {
private:
    int idRuta;
    string origen;
    string destino;
    Autobus* autobus;  // Relación de agregación con la clase Autobus

public:
    // Constructor
    Ruta(int id, const string& origenRuta, const string& destinoRuta)
        : idRuta(id), origen(origenRuta), destino(destinoRuta), autobus(nullptr) {}

    // Getters
    int getIdRuta() const {
        return idRuta;
    }

    string getOrigen() const {
        return origen;
    }

    string getDestino() const {
        return destino;
    }

    Autobus* getAutobus() const {
        return autobus;
    }

    // Otros métodos
    void agregarRuta() {
        std::cout << "Ruta agregada con ID: " << idRuta << std::endl;
        // Lógica para agregar la ruta
    }

    void eliminarRuta() {
        std::cout << "Ruta eliminada con ID: " << idRuta << std::endl;
        // Lógica para eliminar la ruta
    }

    // Setters
    void setIdRuta(int id) {
        idRuta = id;
    }

    void setOrigen(const string& nuevoOrigen) {
        origen = nuevoOrigen;
    }

    void setDestino(const string& nuevoDestino) {
        destino = nuevoDestino;
    }

    void setAutobus(Autobus* nuevoAutobus) {
        autobus = nuevoAutobus;
    }
};



//Las Clases Fecha y Hora no poseen relevancia para el propósito del programa,
//mas bien son clases auxiliares para poder tener un formato
class Fecha {
private:
    int dia;
    int mes;
    int año;

public:
    // Constructor
    Fecha(int d, int m, int a) : dia(d), mes(m), año(a) {}

    // Sobrecarga del operador de inserción <<
    friend std::ostream& operator<<(std::ostream& os, const Fecha& fecha) {
        os << fecha.dia << "/" << fecha.mes << "/" << fecha.año;
        return os;
    }
};

class Hora {
private:
    int horas;
    int minutos;

public:
    // Constructor
    Hora(int h, int m) : horas(h), minutos(m) {}

    // Sobrecarga del operador de inserción <<
    friend std::ostream& operator<<(std::ostream& os, const Hora& hora) {
        os << hora.horas << ":" << hora.minutos;
        return os;
    }
};


class Fecha {
    // Implementación de la clase Fecha
};

class Pago {
private:
    int idPago;
    int idUsuario;
    int idBoleto;
    Fecha fechaPago;
    float monto;

public:
    // Constructor
    Pago(int id, int idUsuarioPago, int idBoletoPago, const Fecha& fecha, float montoPago)
        : idPago(id), idUsuario(idUsuarioPago), idBoleto(idBoletoPago), fechaPago(fecha), monto(montoPago) {}

    // Getters
    int getIdPago() const {
        return idPago;
    }

    int getIdUsuario() const {
        return idUsuario;
    }

    int getIdBoleto() const {
        return idBoleto;
    }

    Fecha getFechaPago() const {
        return fechaPago;
    }

    float getMonto() const {
        return monto;
    }

    // Setters
    void setIdPago(int id) {
        idPago = id;
    }

    void setIdUsuario(int idUsuarioPago) {
        idUsuario = idUsuarioPago;
    }

    void setIdBoleto(int idBoletoPago) {
        idBoleto = idBoletoPago;
    }

    void setFechaPago(const Fecha& nuevaFecha) {
        fechaPago = nuevaFecha;
    }

    void setMonto(float nuevoMonto) {
        monto = nuevoMonto;
    }

    // Otros métodos
    void realizarPago() {
        cout << "Realizando pago con ID: " << idPago << endl;
        // Lógica para realizar el pago
    }

    void cancelarPago() {
        cout << "Cancelando pago con ID: " << idPago << endl;
        // Lógica para cancelar el pago
    }
};


int main()
{
    std::cout << "Hello World!\n";
}
